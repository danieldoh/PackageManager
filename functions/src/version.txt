import { initializeApp } from "firebase/app";
import { firebaseConfig } from "./firebase";
import {getFirestore} from "firebase-admin/firestore";
import {Request,Response} from "express";
import { validation } from "./validate";
import * as semver from 'semver';
const admin = require("firebase-admin");


function getVersionInRange(versionArray: string[], versionRange: string): string[] {
  return versionArray.filter(version => semver.satisfies(version, versionRange));
}

interface typeJson {
  Download_URL: string;
  Version: string;
  Name: string;
  ID: string;
}

//get list of collections and remove 'token' from it
//and loop over the list of collections and check the versions by version pinning?
const downloadFile = async (req: Request, res: Response) => {
  const package_ID = req.params['packageID'];
  let token: string | undefined = req.headers.authorization;
  if (token) {
    const authentication: [boolean, string] = await validation(token);
    if (authentication[0]) {
      try {
        const { metadata } = JSON.parse(JSON.stringify(req.body));
        //const firebaseApp = initializeApp(firebaseConfig);
        const db = getFirestore(admin.apps[0]);
        //const packagesRef = db.collection(metadata.Name).doc(metadata.Version);
        //const doc = await packagesRef.get();
        // version 
        const idRef = db.collection("ID").doc(package_ID);
        const idInfo = await idRef.get();
        if (idInfo.exists) {
          const idData: any = idInfo.data();
          const package_name = idData["Name"];
          const package_version = idData["Version"];
          const collectionRef = db.collection(package_name);
          const col = await collectionRef.get();
          const versionArray: string[] = [];
          col.forEach(doc => {
            versionArray.push(doc.id);
          });
          console.log(versionArray);
          const versionPinning = getVersionInRange(versionArray, metadata.Version);
          const packageInfo: typeJson[] = [];
          for (var version of versionPinning) {
            let ref = db.collection(package_name).doc(package_version);
            let doc = await ref.get();
            if (doc.exists) {
              const docData: any = doc.data();
              const info: typeJson = {
                metadata: {
                  Version: docData["Version"],
                  Name: docData["Name"],
                  ID: docData["ID"]
                }, 
                data: {
                  Content: 
                }
                
              }
              packageInfo.push(info);
            }
            res.status(200).send(packageInfo);
          }
        } else {
          res.status(404).send("Package does not exist."); 
        }
        /*if (doc.exists) {
          const docData: any = doc.data();
          const url: string = docData["Download_URL"];
          const xhr = new XMLHttpRequest();
          xhr.responseType = 'blob';
          xhr.onload = (event) => {
            //const blob = xhr.response;
          }
          xhr.open('GET', url);
          xhr.send()
        }
        console.log(versionPinning)*/
      } catch (err) {
        console.error(err);
        res.status(500).send(err);
      }
    } else {
      res.status(401).send("Unauthorized");
    }
  } else {
    res.status(404).send("Token is undefined");
  }
};

export {downloadFile};
